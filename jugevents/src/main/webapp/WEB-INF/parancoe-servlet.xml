<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:parancoe="http://www.parancoe.org/schema/parancoe"
       xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.parancoe.org/schema/parancoe http://www.parancoe.org/schema/parancoe.xsd
       http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-2.0.xsd"
       default-lazy-init="false" >

    <context:component-scan base-package="it.jugpadova"/>

    <!-- Authomatic DAO definition from persistent classes -->
    <parancoe:define-daos basePackage="it.jugpadova"/>

    <bean class="org.parancoe.web.annotation.ParancoeAnnotationMethodHandlerAdapter">
        <property name="webBindingInitializer">
            <bean class="it.jugpadova.controllers.BasicWebAppBindingInitializer"/>
        </property>
        <property name="validator" ref="validator"/>
    </bean>

    <bean id="daos" parent="abstractDaoProvider">
        <property name="proxyInterfaces">
            <value>it.jugpadova.Daos</value>
        </property>
        <property name="target">
            <bean parent="genericDaoProvider"/>
        </property>
    </bean>

    <bean id="conf" class="it.jugpadova.Conf" parent="abstractConf" name="conf"/>

    <!-- Multipart resolver -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- the maximum file size in bytes -->
        <property name="maxUploadSize" value="100000"/>
    </bean>

    <!--  override bean definition in parancoe-servlet.xml  -->
    <!-- sends exceptions to genericError.jsp -->
    <bean id="exceptionResolver" class="it.jugpadova.util.JUGEventsExceptionResolver" autowire="byType"/>
    
    <!--  begin security section -->
    <bean name="pluginSecurityFilterDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /adminjugger/**=ROLE_ADMIN
                /people/**=ROLE_ADMIN, ROLE_PARANCOE
                /event/edit*=ROLE_ADMIN, ROLE_JUGGER
                /event/delete*=ROLE_ADMIN, ROLE_JUGGER
                /event/participants*=ROLE_ADMIN, ROLE_JUGGER
                /event/winners*=ROLE_ADMIN, ROLE_JUGGER
                /event/addparticipant*=ROLE_ADMIN, ROLE_JUGGER
                /event/resources*=ROLE_ADMIN, ROLE_JUGGER
                /jugger/edit*=ROLE_ADMIN, ROLE_JUGGER
                /admin/**=ROLE_ADMIN
                /**=IS_AUTHENTICATED_ANONYMOUSLY
            </value>
        </constructor-arg>
    </bean>
    <!-- TODO verify AJAX security...at present, no security -->
    <bean id="DWRAjaxBo" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ajaxMethods"/>
        <property name="proxyInterfaces"
            value="it.jugpadova.blo.ajax.AjaxMethods"  />
    </bean>
    <bean id="securedBeanNames" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <value>ajaxMethods</value>
            </list>
        </constructor-arg>
    </bean>
    <!--  end security section -->

    <!-- begin dwr section -->
    <!-- **WARNING** In production leave commented the following definition for
        the dwrController. It's useful only for debug. In production it's a security hole.
        If debug="true" point your browser to /<your context>/dwr/index.html
    -->
    <dwr:controller id="dwrController" debug="true"/>
    <dwr:configuration>
        <dwr:convert class="it.jugpadova.bean.ParticipantBean" type="bean"/>
        <dwr:convert class="java.lang.Exception" type="exception" />
        <dwr:convert class="java.lang.StackTraceElement" type="bean"/>            
    </dwr:configuration>
    <!-- end dwr section -->

    <!-- begin jcaptcha section -->
    <bean id="captchaService"
          class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
        <constructor-arg index="0">
            <ref bean="imageEngine"/>
        </constructor-arg>
        <constructor-arg index="1">
            <value>180</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>180000</value>
        </constructor-arg>
    </bean>
    <bean class="com.octo.captcha.engine.GenericCaptchaEngine" id="imageEngine">
        <constructor-arg index="0">
            <list>
                <ref bean="CaptchaFactory"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="CaptchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory" >
        <constructor-arg>
            <ref bean="wordgen"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="wordtoimage"/>
        </constructor-arg>
    </bean>
    <bean id="wordgen" class= "com.octo.captcha.component.word.wordgenerator.DictionaryWordGenerator" >
        <constructor-arg>
            <ref bean="filedict"/>
        </constructor-arg>
    </bean>
    <bean id="filedict" class="com.octo.captcha.component.word.FileDictionary" >
        <constructor-arg index="0">
            <value>toddlist</value>
        </constructor-arg>
    </bean>
    <bean id="wordtoimage" class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage" >
        <constructor-arg index="0">
            <ref bean="fontGenRandom"/>
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="backGenUni"/>
        </constructor-arg>
        <constructor-arg index="2">
            <ref bean="simpleWhitePaster"/>
        </constructor-arg>
    </bean>
    <bean id="fontGenRandom" class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator" >
        <constructor-arg index="0">
            <value>40</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>50</value>
        </constructor-arg>
        <constructor-arg index="2">
            <list>
                <ref bean="fontArial"/>
                <ref bean="fontVerdana"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="fontArial" class="java.awt.Font" >
        <constructor-arg index="0">
            <value>Arial</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>10</value>
        </constructor-arg>
    </bean>
    <bean id="fontVerdana" class="java.awt.Font" >
        <constructor-arg index="0">
            <value>Verdana</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>10</value>
        </constructor-arg>
    </bean>
    <bean id="backGenUni" class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator" >
        <constructor-arg index="0">
            <value>300</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>100</value>
        </constructor-arg>
    </bean>
    <bean id="simpleWhitePaster" class="com.octo.captcha.component.image.textpaster.SimpleTextPaster" >
        <constructor-arg type="java.lang.Integer" index="0">
            <value>3</value>
        </constructor-arg>
        <constructor-arg type="java.lang.Integer" index="1">
            <value>5</value>
        </constructor-arg>
        <constructor-arg type="java.awt.Color" index="2">
            <ref bean="colorBlue"/>
        </constructor-arg>
    </bean>
    <bean id="colorGreen" class="java.awt.Color" >
        <constructor-arg index="0">
            <value>0.0</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>1.0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>0.0</value>
        </constructor-arg>
    </bean>
    <bean id="colorBlue" class="java.awt.Color" >
        <constructor-arg index="0">
            <value>0.0</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>0.0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>1.0</value>
        </constructor-arg>
    </bean>
    <!-- end jcaptcha section -->

    <!-- start mail section -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <!-- here your smtp server -->
        <property name="host">
            <value>${mail.host}</value>
        </property>
        <!-- Parameters for SMTP AUTH -->
        <property name="username">
            <value>${mail.username}</value>
        </property>
        <property name="password">
            <value>${mail.password}</value>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}
                </prop>
                <!-- used by gmail smtp server -->
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}
                </prop>
            </props>
        </property>
    </bean>
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <value>
                resource.loader=class
                class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
            </value>
        </property>
    </bean>
    <!-- end mail section -->
    
    <!-- start footprint section -->
    <bean id="footprintSettings" class="net.java.dev.footprint.model.generated.FootprintProperties">
        <property name="title" value="JUG Event Certificate"/>
        <property name="template">
            <bean class="net.java.dev.footprint.model.generated.ConfigPdfTemplate">
                <property name="pdfTemplateFilename" value="footprint/template.pdf"/>
            </bean>
        </property>
        <property name="security">
            <bean class="net.java.dev.footprint.model.generated.ConfigSecurity">
                <property name="keystoreType" value="pkcs12"/>
                <property name="keystoreFilename" value="${footprint.keystore.filename}"/>
                <property name="keystorePassword" value="${footprint.keystore.password}"/>
                <property name="keystorePkPassword" value="${footprint.keystore.pk.password}"/>
                <property name="signatureContactMail" value="${footprint.signature.contact.mail}"/>
                <property name="signatureLocation" value="JUG Events"/>
                <property name="signatureReason" value="Titolo dell'evento"/>
                <property name="signatureStamp">
                    <bean class="net.java.dev.footprint.model.generated.SignatureStamp">
                        <property name="signatureStampImageFilename" value="footprint/stamp.png"/>
                        <property name="signatureStampX1" value="140"/>
                        <property name="signatureStampY1" value="100"/>
                        <property name="signatureStampX2" value="165"/>
                        <property name="signatureStampY2" value="124"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <!-- end footprint section -->
    
    <!-- start Tiles 2 section -->
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/defs/default.xml</value>
                <!--
                <value>/WEB-INF/defs/general.xml</value>
                <value>/WEB-INF/defs/widgets.xml</value>
                <value>/WEB-INF/defs/administrator.xml</value>
                <value>/WEB-INF/defs/customer.xml</value>
                <value>/WEB-INF/defs/templates.xml</value>
                -->
            </list>
        </property>
    </bean>
    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
        <!--
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        -->
    </bean>
    <!-- end Tiles 2 section -->
    
    <!-- start SlideShare API section -->
    <bean id="slideShareApi" class="com.benfante.jslideshare.SlideShareAPIImpl">
        <property name="connector" ref="slideShareConnector"/>
    </bean>
    
    <bean id="slideShareConnector" class="com.benfante.jslideshare.SlideShareConnectorImpl">
        <property name="apiKey" value="${slideshare.apiKey}"/>
        <property name="sharedSecret" value="${slideshare.sharedSecret}"/>
        <property name="soTimeout" value="10000"/>
    </bean>
    <!-- end SlideShare API section -->
</beans>
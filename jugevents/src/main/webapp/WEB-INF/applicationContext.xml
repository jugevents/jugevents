<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:parancoe="http://www.parancoe.org/schema/parancoe"
       xmlns:parancoe-web="http://www.parancoe.org/schema/parancoe-web"
       xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.parancoe.org/schema/parancoe http://www.parancoe.org/schema/parancoe.xsd
       http://www.parancoe.org/schema/parancoe-web http://www.parancoe.org/schema/parancoe-web.xsd
       http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-2.0.xsd">
    
    <context:component-scan base-package="it.jugpadova.blol"/>
    <parancoe:define-daos basePackage="it.jugpadova"/>
    <parancoe:define-daos basePackage="org.parancoe.plugins.security"/>
    <parancoe:discover-persistent-classes basePackage="it.jugpadova.po"/>
    <parancoe:discover-persistent-classes basePackage="org.parancoe.plugins.security"/>
            
    <bean id="conf" class="it.jugpadova.Conf" parent="abstractConf"/>
    
    <bean id="daos" parent="abstractDaoProvider">
        <property name="proxyInterfaces">
            <value>it.jugpadova.Daos</value>
        </property>
        <property name="target">
            <bean parent="genericDaoProvider"/>
        </property>
    </bean>
    
    <bean id="securedBeanNames" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <value>ajaxMethods</value>
            </list>
        </constructor-arg>
    </bean>


    <!-- begin jcaptcha section -->
    <bean id="captchaService"
          class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
        <constructor-arg index="0">
            <ref bean="imageEngine"/>
        </constructor-arg>
        <constructor-arg index="1">
            <value>180</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>180000</value>
        </constructor-arg>
    </bean>
    <bean class="com.octo.captcha.engine.GenericCaptchaEngine" id="imageEngine">
        <constructor-arg index="0">
            <list>
                <ref bean="CaptchaFactory"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="CaptchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory" >
        <constructor-arg>
            <ref bean="wordgen"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="wordtoimage"/>
        </constructor-arg>
    </bean>
    <bean id="wordgen" class= "com.octo.captcha.component.word.wordgenerator.DictionaryWordGenerator" >
        <constructor-arg>
            <ref bean="filedict"/>
        </constructor-arg>
    </bean>
    <bean id="filedict" class="com.octo.captcha.component.word.FileDictionary" >
        <constructor-arg index="0">
            <value>toddlist</value>
        </constructor-arg>
    </bean>
    <bean id="wordtoimage" class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage" >
        <constructor-arg index="0">
            <ref bean="fontGenRandom"/>
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="backGenUni"/>
        </constructor-arg>
        <constructor-arg index="2">
            <ref bean="simpleWhitePaster"/>
        </constructor-arg>
    </bean>
    <bean id="fontGenRandom" class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator" >
        <constructor-arg index="0">
            <value>40</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>50</value>
        </constructor-arg>
        <constructor-arg index="2">
            <list>
                <ref bean="fontArial"/>
                <ref bean="fontVerdana"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="fontArial" class="java.awt.Font" >
        <constructor-arg index="0">
            <value>Arial</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>10</value>
        </constructor-arg>
    </bean>
    <bean id="fontVerdana" class="java.awt.Font" >
        <constructor-arg index="0">
            <value>Verdana</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>10</value>
        </constructor-arg>
    </bean>
    <bean id="backGenUni" class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator" >
        <constructor-arg index="0">
            <value>300</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>100</value>
        </constructor-arg>
    </bean>
    <bean id="simpleWhitePaster" class="com.octo.captcha.component.image.textpaster.SimpleTextPaster" >
        <constructor-arg type="java.lang.Integer" index="0">
            <value>3</value>
        </constructor-arg>
        <constructor-arg type="java.lang.Integer" index="1">
            <value>5</value>
        </constructor-arg>
        <constructor-arg type="java.awt.Color" index="2">
            <ref bean="colorBlue"/>
        </constructor-arg>
    </bean>
    <bean id="colorGreen" class="java.awt.Color" >
        <constructor-arg index="0">
            <value>0.0</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>1.0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>0.0</value>
        </constructor-arg>
    </bean>
    <bean id="colorBlue" class="java.awt.Color" >
        <constructor-arg index="0">
            <value>0.0</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>0.0</value>
        </constructor-arg>
        <constructor-arg index="2">
            <value>1.0</value>
        </constructor-arg>
    </bean>
    <!-- end jcaptcha section -->

    <!-- start mail section -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host">
            <value>${mail.host}</value>
        </property>
        <property name="username">
            <value>${mail.username}</value>
        </property>
        <property name="password">
            <value>${mail.password}</value>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}
                </prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}
                </prop>
            </props>
        </property>
    </bean>
    
    <!-- Use this only for test purposes -->
    <!--
    <bean id="mailSender" class="it.jugpadova.mock.ParancoeMockMailSender"/>
    -->
    
    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <value>
                resource.loader=class
                class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
            </value>
        </property>
    </bean>
    <!-- end mail section -->

    <!-- start SlideShare API section -->
    <bean id="slideShareApi" class="com.benfante.jslideshare.SlideShareAPIImpl">
        <property name="connector" ref="slideShareConnector"/>
    </bean>
    
    <bean id="slideShareConnector" class="com.benfante.jslideshare.SlideShareConnectorImpl">
        <property name="apiKey" value="${slideshare.apiKey}"/>
        <property name="sharedSecret" value="${slideshare.sharedSecret}"/>
        <property name="soTimeout" value="10000"/>
    </bean>
    <!-- end SlideShare API section -->
    
    <!-- start footprint section -->
    <bean id="footprintSettings" class="net.java.dev.footprint.model.generated.FootprintProperties">
        <property name="title" value="JUG Event Certificate"/>
        <property name="template">
            <bean class="net.java.dev.footprint.model.generated.ConfigPdfTemplate">
                <property name="pdfTemplateFilename" value="footprint/template.pdf"/>
            </bean>
        </property>
        <property name="security">
            <bean class="net.java.dev.footprint.model.generated.ConfigSecurity">
                <property name="keystoreType" value="pkcs12"/>
                <property name="keystoreFilename" value="${footprint.keystore.filename}"/>
                <property name="keystorePassword" value="${footprint.keystore.password}"/>
                <property name="keystorePkPassword" value="${footprint.keystore.pk.password}"/>
                <property name="signatureContactMail" value="${footprint.signature.contact.mail}"/>
                <property name="signatureLocation" value="JUG Events"/>
                <property name="signatureReason" value="Titolo dell'evento"/>
                <property name="signatureStamp">
                    <bean class="net.java.dev.footprint.model.generated.SignatureStamp">
                        <property name="signatureStampImageFilename" value="footprint/stamp.png"/>
                        <property name="signatureStampX1" value="140"/>
                        <property name="signatureStampY1" value="100"/>
                        <property name="signatureStampX2" value="165"/>
                        <property name="signatureStampY2" value="124"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <!-- end footprint section -->
      <!-- quartz scheduler (begin) -->
	<bean name="reminderJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="it.jugpadova.scheduler.ParticipantsReminderQuartzJob" />
		<property name="jobDataAsMap">
			<map>
			 <entry key="schedulerBo" value-ref="schedulerBo"/>
			</map>
		</property>
	</bean>

	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="reminderJob" />
		
		<property name="cronExpression" value="* * 23 * * ?" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>
	<!-- quartz scheduler (end) -->
        
</beans>
package it.jugpadova.blo;

import it.jugpadova.JugEventsBaseTest;
import it.jugpadova.po.Event;
import it.jugpadova.po.Participant;
import it.jugpadova.po.Registration;
import java.util.ArrayList;
import java.util.Date;

/**
 * Test on the activation of the registration to an event.
 * 
 * @author Lucio Benfante
 */
public class EventRegistrationOpenTest extends JugEventsBaseTest {
    private Event event;
    private Registration registration;
    private static Date NOW = new Date();
    private static long ONE_DAY = 24*60*60*1000;
    private static Date YESTERDAY = new Date(NOW.getTime()-ONE_DAY);
    private static Date TOMORROW = new Date(NOW.getTime()+ONE_DAY);
    private static Date ONE_WEEK_AGO = new Date(NOW.getTime()-7*ONE_DAY);
    private static Date ONE_WEEK_FORWARD = new Date(NOW.getTime()+7*ONE_DAY);
    
    @Override
    public void setUp() throws Exception {
        super.setUp();
        this.event = new Event();
        event.setStartDate(ONE_WEEK_FORWARD);
        event.setEndDate(ONE_WEEK_FORWARD);
        this.registration = new Registration();
        event.setRegistration(this.registration);
    }
    
    public void testWithoutRegistrationRules() {
        this.event.setRegistration(null);
        assertTrue(this.event.getRegistrationOpen());
    }

    public void testPassedWithoutRegistrationRules() {
        event.setStartDate(ONE_WEEK_AGO);
        event.setEndDate(ONE_WEEK_AGO);
        this.event.setRegistration(null);
        assertFalse(this.event.getRegistrationOpen());
    }
    
    public void testNotEnabledRegistration() {
        this.registration.setEnabled(false);
        assertFalse(this.event.getRegistrationOpen());
    }
    
    public void testNotPassedWithSimpleEnabledRegistration() {
        this.registration.setEnabled(true);
        assertTrue(this.event.getRegistrationOpen());
    }

    public void testPassedWithSimpleEnabledRegistration() {
        event.setStartDate(ONE_WEEK_AGO);
        event.setEndDate(ONE_WEEK_AGO);
        this.registration.setEnabled(true);
        assertFalse(this.event.getRegistrationOpen());
    }

    public void testPassedWithoutEndRegistrationDate() {
        event.setStartDate(ONE_WEEK_AGO);
        event.setEndDate(ONE_WEEK_AGO);
        this.registration.setEnabled(true);
        this.registration.setStartRegistration(new Date(14*ONE_DAY));
        this.registration.setEndRegistration(null);
        this.registration.setMaxParticipants(25L);
        this.registration.setManualActivation(null);
        assertFalse(this.event.getRegistrationOpen());
    }
    
    public void testManualActivationEnabled() {
        this.registration.setManualActivation(true);
        assertTrue(this.event.getRegistrationOpen());        
    }

    public void testManualActivationDisabled() {
        this.registration.setManualActivation(false);
        assertFalse(this.event.getRegistrationOpen());        
    }
    
    public void testParticipansUnderTheMaxLimit() {
        this.event.setParticipants(new ArrayList<Participant>());
        for (int i=0; i < 24; i++) {
            final Participant participant = new Participant();            
            participant.setConfirmed(true);
            this.event.getParticipants().add(participant);
        }
        this.registration.setMaxParticipants(25L);
        assertTrue(this.event.getRegistrationOpen());        
    }

    public void testParticipansOverTheMaxLimit() {
        this.event.setParticipants(new ArrayList<Participant>());
        for (int i=0; i < 25; i++) {
            final Participant participant = new Participant();            
            participant.setConfirmed(true);
            this.event.getParticipants().add(participant);
        }
        this.registration.setMaxParticipants(25L);
        assertFalse(this.event.getRegistrationOpen());        
    }

    public void testRegistrationBeforeTheStart() {
        this.registration.setStartRegistration(TOMORROW);
        this.registration.setEndRegistration(ONE_WEEK_FORWARD);
        assertFalse(this.event.getRegistrationOpen());        
    }
    
    public void testRegistrationBetweenTheValidDates() {
        this.registration.setStartRegistration(YESTERDAY);
        this.registration.setEndRegistration(ONE_WEEK_FORWARD);
        assertTrue(this.event.getRegistrationOpen());        
    }

    public void testRegistrationAfterTheEnd() {
        this.registration.setStartRegistration(ONE_WEEK_AGO);
        this.registration.setEndRegistration(YESTERDAY);
        assertFalse(this.event.getRegistrationOpen());        
    }

    public void testRegistrationBeforeTheStartWithOnlyStartDate() {
        this.registration.setStartRegistration(TOMORROW);
        assertFalse(this.event.getRegistrationOpen());        
    }
    
    public void testRegistrationAfterTheStartWithOnlyStartDate() {
        this.registration.setStartRegistration(YESTERDAY);
        assertTrue(this.event.getRegistrationOpen());        
    }

    public void testRegistrationBeforeTheEndWithOnlyEndDate() {
        this.registration.setEndRegistration(TOMORROW);
        assertTrue(this.event.getRegistrationOpen());        
    }
    
    public void testRegistrationAfterTheEndWithOnlyEndDate() {
        this.registration.setEndRegistration(YESTERDAY);
        assertFalse(this.event.getRegistrationOpen());        
    }
    
}
